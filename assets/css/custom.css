.content {
    font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
}

.content :where(ul):not(:where([class~="not-prose"], [class~="not-prose"] *, .block ul)) li {
    margin-bottom: 1rem;
    margin-top: 2rem;
}

li.locallink {
    margin-bottom: 0rem;
    margin-top: 0rem;
}

.content :where(p):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    margin-top: 1rem;
}

/* Hide images with #gh-dark-mode-only at the end of the URL if light mode is enabled */
html:not(.dark) img[src$="#gh-dark-mode-only"] {
    display: none;
}

/* Hide images with #gh-light-mode-only at the end of the URL if dark mode is enabled */
html.dark img[src$="#gh-light-mode-only"] {
    display: none;
}

/* Prevent line breaks next to icons */
span svg {
    display: inline-block;
}

/* Callouts: sets the styles */
.callout {
    background-color: hsl(var(--primary-hue) var(--primary-saturation) 39%/.05);
}

:is(html[class~="dark"] .callout) {
    background-color: hsl(var(--primary-hue) var(--primary-saturation) 77%/.1);
}

/* Notebooks: fix overline in outputs */
:is(html[class~="dark"] .content pre :where(code):not(:where(.code-block code, [class~="not-prose"], [class~="not-prose"] *))) {
    background-color: rgb(255 255 255 / 0.0);
    border-color: rgb(255 255 255 / 0.0);
}

.content pre :where(code):not(:where(.code-block code, [class~="not-prose"], [class~="not-prose"] *)) {
    background-color: rgb(0 0 0 / 0.0);
    border-color: rgb(0 0 0 / 0.0);
}

.star {
    position: absolute;
    width: 2px;
    height: 2px;
    animation: blink 10s infinite ease-in-out;
  }

@keyframes blink {
0%, 100% { opacity: 0; }
50% { opacity: 1; }
}
